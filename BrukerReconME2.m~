% function [mag,frq,f,g] = BrukerReconME2(bruker)
% Original file by Evan Calbrese, 6/8/11
% rmd - Adapted for multi-echo read, 6/8/11

%% Select Directories

% if isempty(bruker)
   display('   Select directory containing fid file to recon.')
   bruker=readBrukerDirectory();
% end

% display('select directory to save output NIfTI to')
% save_path=uigetdir('/~', 'select save path');

%% Read matrix sizes and fid file

m = bruker.method.PVM_Matrix(1);            % Frequency encode direction
n = bruker.method.PVM_Matrix(2);            % Phase encode 1 direction
if length(bruker.method.PVM_Matrix) < 3
    p = 1;
else
    p = bruker.method.PVM_Matrix(3);        % Phase encode 2 direction
end
echoes = bruker.method.PVM_NEchoImages;     % Number of echoes
nrecs = bruker.method.PVM_EncNReceivers;    % Number of receivers

if echoes > 1
    data_mat=reshape(bruker.fid,m,echoes,nrecs,n,p);
    data_mat = permute(data_mat,[1 4 5 2 3]);
else

    
end

%% Initialization


for k = 1:nrecs*echoes
    data_mat(:,:,:,k) = fftshift(abs(ifftn(data_mat(:,:,:,k))));   
end

figure(1);
subplot(211);
montageME(squeeze(data_mat(:,:,:,1:2:end)),4,'1D');
subplot(212);
montageME(squeeze(fftshift(abs(ifftn(data_mat(:,:,:,2:2:end))))),4,'1D');

mag = zeros(m,n,p,echoes);
frq = mag;
coil = zeros(m,n,p,echoes*nrecs);

%% Magnitude and frequency map generation

% for k = 1:echoes
%     mag(:,:,:,k) = fftshift(abs(ifftn(sum(data_mat(:,:,:,(k-1)*nrecs+1:k*nrecs),4))));   
% end

% montageME(mag,ceil(p/2));
% 
% if (strcmp(bruker.method.EchoAcqMode,'allEchoes') == 1 && mod(k,2) == 0)
%     mag(:,:,:,2:2:end) = mag(end:-1:1,:,:,2:2:end);
% end

% % for k = 1:2*echoes
% %     coil(:,:,:,k) = fftshift((ifftn(data_mat(:,:,:,k))));   
% % end
% % 
% % f = coil(:,:,4,1);
% % g = coil(:,:,4,2);
% % 
% % options.dim = '3D';
% % options.ncoil = nrecs;
% % options.fermir = 8/512;
% % options.fermiw = 128/512;%*view_window;
% % for k = 1:echoes
% %     frq(:,:,:,k) = CalcPhaseBruker(coil(:,:,:,(k-1)*nrecs+1:k*nrecs),options) ...
% %         /2/pi/bruker.method.EffectiveTE(1);
% %     mag(:,:,:,k) = sum(coil(:,:,:,(k-1)*nrecs+1:k*nrecs),4);
% % end


% for k = 1:echoes
%     mag(:,:,:,k) = fftshift((ifftn(sum(data_mat(:,:,:,(k-1)*nrecs+1:k*nrecs),4))));   
% end


% if (strcmp(bruker.method.EchoAcqMode,'allEchoes') == 1 && mod(k,2) == 0)
%     mag(:,:,:,2:2:end) = mag(end:-1:1,:,:,2:2:end);
%     frq(:,:,:,2:2:end) = frq(end:-1:1,:,:,2:2:end);
% end
% 
% 
% mag = abs(mag);
% 
% figure(1);
% subplot(211); montageME(mag,ceil(p/2),'1D');
% subplot(212); montageME(frq,ceil(p/2),'1D');
% 
% figure(2); show(frq(:,:,4,1));

% else
%     if length(bruker.method.PVM_Matrix)==3
%         data_mat=reshape(bruker.fid, bruker.method.PVM_Matrix(1,1), bruker.method.PVM_Matrix(1,2), bruker.method.PVM_Matrix(1,3));
%         img=fftshift(abs(ifftn(data_mat)));
%         m=max(img(:));
%         img=img/m*(2^15-1); %for converting to 16 bit
% %         nii=make_nii(img, bruker.method.PVM_SpatResol, [0 0 0], 512);
% %         out_file=strcat(bruker.subject.SUBJECT_name_string,'_',bruker.subject.SUBJECT_date,'.nii');
% %         save_nii(nii,fullfile(save_path,out_file));
%     else
%         data_mat=reshape(bruker.fid, bruker.method.PVM_Matrix(1,1), bruker.method.PVM_Matrix(1,2));
%         img=fftshift(abs(ifftn(data_mat)));
%         m=max(img(:));
%         img=img/m*(2^15-1); %for converting to 16 bit
% %         nii=make_nii(img, bruker.method.PVM_SpatResol, [0 0], 512);
% %         out_file=strcat(bruker.subject.SUBJECT_name_string,'_',bruker.subject.SUBJECT_date,'.nii');
% %         save_nii(nii,fullfile(save_path,out_file));
%     end
% end



% function [img_out] = CalcPhaseBruker(img,options)
% 
% if (nargin == 1)
%     ncoil = 1;
% end
% 
% if ( nargin == 2 && strcmp(options.dim,'3D'))
% %     fprintf('3D...\n');
%     [opxres,opyres,opzres,ncoil] = size(img);
%     
%     %%% Fermi Window
%     [y,x,z] = meshgrid(-opyres/2:opyres/2-1,-opxres/2:opxres/2-1,-opzres/2:opzres/2-1);
%     if (~isfield(options,'fermir'))
%         fermir=8*opxres/512;%100,12,8,32; 4 for 3T
%     else
%         fermir=options.fermir*opxres;
%     end
%     
%     if (~isfield(options,'fermiw'))
%         fermiw=8*opxres/512;%12,8, 32;
%     else
%         fermiw=options.fermiw*opxres;
%     end
%     krad = sqrt(x.^2+y.^2+z.^2);
%     FW = 1./(1+exp((krad-fermir)/fermiw));
%     
%     img_out = zeros(opxres,opyres,opzres,ncoil);
%     %%% compute phase
%     for icoil = 1:ncoil
%         ipha_low = ifftnc(fftnc(img(:,:,:,icoil)).*FW);
%         img_out(:,:,:,icoil) = abs(img(:,:,:,icoil)).*exp(1i*(angle(img(:,:,:,icoil)) - angle(ipha_low)));
%     end
%     img_out = angle(sum(img_out,4));
% end
% 
% end
% 
% function im = fftnc(d)
% % im = fftnc(d)
% %
% % fftnc perfomrs a centered fftn
% %
% im = fftshift(fftn(fftshift(d)));
% end
% 
% function im = ifftnc(d)
% % im = ifftnc(d)
% %
% % ifftnc perfomrs a centered ifftn
% %
% im = fftshift(ifftn(fftshift(d)));
% end


