function [frq] = CalcPhaseME(img,view_window)
%% function [img] = CalcPhase(img,options)
% compute the phase map at 7T
% The phase map is computed by removing the coil phase. The coil phase
% is estimated using a low resolution image. Assume original images are stored
% in the same directory. Odd-numbered images are magnitude image;
% even-numbered images are phase image (x1000). The last two
% images for each slice are the sum-of-squares images.
% options.dim "3D", "2D"
% options.ncoil
% options.fermir: number of voxel per 512, e,g. 8/512
% options.fermiw: number of voxel per 512, e.g. 8/512
% Chunlei Liu, Stanford University, 08/18/2007,
%              Duke University, 2009
% Adapted for Russell Dibb's Multi-echo Toolkit, 05/31/2011
%              Duke Universtiy, 2011
% NOTE!!!! Script requires .mag b

if ~exist('view_window','var')
    view_window = 1;
end

options.dim = '3D';
options.ncoil = 1;
options.fermir = 8/512;
options.fermiw_first_echo = 8/512*view_window;

[opxres,opyres,opzres,echoes] = size(img);
z = ceil(opzres/2);
frq = zeros(size(img));
ncoil = 1; % Use MapFreqME if this is not the case (ncoil ~= 1)

%%% Fermi Window
[y,x,z] = meshgrid(-opyres/2:opyres/2-1,-opxres/2:opxres/2-1,-opzres/2:opzres/2-1);

back = 0; time = 0;
for k = 1:echoes
    [back,time] = progress(k,echoes,'Calculating phase for echo',back,time);
    if (~isfield(options,'fermir'))
        fermir=8*opxres/512;%100,12,8,32; 4 for 3T
    else
        fermir=options.fermir*opxres;
    end

    if (~isfield(options,'fermiw'))
        fermiw=8*opxres/512;%12,8, 32;
    else
        fermiw=options.fermiw*opxres;
    end
    krad = sqrt(x.^2+y.^2+z.^2);
    FW = 1./(1+exp((krad-fermir)/fermiw));

    img_out = zeros(opxres,opyres,opzres,ncoil);
    %%% compute phase
    for icoil = 1:ncoil
        ipha_low = ifftnc(fftnc(img(:,:,:,icoil)).*FW);
        img_out(:,:,:,icoil) = abs(img(:,:,:,icoil)).*exp(1i*(angle(img(:,:,:,icoil)) - angle(ipha_low)));
    end
    img_out = angle(sum(img_out,4));
    frq(:,:,:,k) = img_out/2/pi;
    montageME(frq,z,'1D'); title('Frequency Map');

end



end

function im = fftnc(d)
% im = fftnc(d)
%
% fftnc perfomrs a centered fftn
%
im = fftshift(fftn(fftshift(d)));
end

function im = ifftnc(d)
% im = ifftnc(d)
%
% ifftnc perfomrs a centered ifftn
%
im = fftshift(ifftn(fftshift(d)));
end
