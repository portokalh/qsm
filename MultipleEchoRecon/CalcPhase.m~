%%function [Freq] = MapFreqME(pfile)
% Before calling the function, put the pfiles of GRE sequences in a
% separate folder. Call the function in the created folder. Otherwise, you
% have to provide the full path for the pfile.
% enter MapFreqME() 
%++++++++++++++++++++++++++++++++++++++++++++++++++++++++
% ORIG Input:
% function [Freq] = MapFreqME()
% Input:     The function will read in all pfiles with a name in 
%            the format of 'split_me_trains_gaps.*' from the current
%            directory.
% Output:
% Freq  -    Frequency maps in Hz, stored in binary float format 
%            nrows x ncols x nslices with the file name of echo#.freq
%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++
% Chunlei Liu, Duke University, 06/2009
% slg - 100715 V2 removed Dim as param MapFreq, use
%        dimensions from pfile header (as stored by civm 3D cartesian scans)
%        Changed raw data reader to use header dimensions and bl skip.
%        V3 added fft2c and fftnc and inverses, provided by Chunlei.
%        Wrapped GE header reader to notice missing Pfile.
% slg - 100716 V4 Now able to discern raw format and read short and int/EDR Pfiles.
% rmd - 110310 V_Multi_Echo - Only works for CIVM multi echo files reading
%        in split_me_trains_gaps.* files created by radish reconstruction
%%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%function [Freq] = MapFreqME()
function  [Mags,Freqs] = MapFreqME(pfile)
%% parameters
if (~exist('pfile','var'))
    pfile = dir('PN*');
    if isempty(pfile)
        pfile = dir('*.raw');
    end
    if isempty(pfile)
        fprintf('there are no raw files in the folder!\n');
    end
    num_pfile = length(pfile);
else
    num_pfile = size(pfile,1);
    printf('Total number of raw files to read %d:\n',num_pfile);
    for ipfile = 1:num_pfile
        temp_pfile(ipfile).name = pfile(ipfile,:);
    end
    pfile = temp_pfile;
end
fprintf('Total number of raw files to read %d:\n',num_pfile);
if num_pfile >= 10
    dummy = pfile(2);
    pfile(2:9) = pfile(3:10);
    pfile(10) = dummy;
end


%% read in raw data
options.dim = '3D';
options.ncoil = 1;
options.fermir = 8/512;
options.fermiw = 8/512;

for ipfile = 1:num_pfile
    fprintf('  %d/%d: %s ',ipfile, num_pfile, pfile(ipfile).name);
 
    if ipfile == 1
        mag = zeros(hdr.rdb.da_xres,hdr.rdb.user7,hdr.rdb.user8,num_pfile);
        frq = mag;
    end
   
    name = pfile(ipfile).name;
    runno_only = name(1:end-5);  % assume split_ME_trains_gaps.runno form of pfile
      
    FreqName = ['echo' runno_only, '.freq'];     
    Freq = CalcPhase(img,options);
    Freq = Freq/TE/2/pi;
   
    mag(:,:,:,ipfile) = abs(img);
    frq(:,:,:,ipfile) = Freq; 
    fid = fopen(imgName,'w');
    fwrite(fid,abs(img),'float');
    fclose(fid);
    fprintf(', wrote 32-bit real: %s\n',imgName);
    
    fid = fopen(FreqName,'w');
    fwrite(fid,Freq,'float');
    fclose(fid);
    fprintf(', wrote 32-bit real: %s\n',FreqName);
end
save([num2str(num_pfile) '_echoes_frq.mat'],'frq');
save([num2str(num_pfile) '_echoes_mag.mat'],'mag');
fprintf('done!\n');
end

%%
%%%%% function [img] = CalcPhase(img,options)
%%%%% compute the phase map at 7T
%%%%% The phase map is computed by removing the coil phase. The coil phase
%%%%% is estimated using a low resolution image. Assume original images are stored
%%%%% in the same directory. Odd-numbered images are magnitude image;
%%%%% even-numbered images are phase image (x1000). The last two
%%%%% images for each slice are the sum-of-squares images.
%%%%% options.dim "3D", "2D"
%%%%% options.ncoil
%%%%% options.fermir: number of voxel per 512, e,g. 8/512
%%%%% options.fermiw: number of voxel per 512, e.g. 8/512
%%%%% Chunlei Liu, Stanford University, 08/18/2007,
%%%%%              Duke University, 2009


options.dim = '3D';
options.ncoil = 1;
options.fermir = 8/512;
options.fermiw = 8/512;

function [img_out] = CalcPhase(img,options)

if (nargin == 1)
    ncoil = 1;
end

if ( nargin == 2 && strcmp(options.dim,'3D'))
%     fprintf('3D...\n');
    opxres = size(img,1);
    opyres = size(img,2);
    opzres = size(img,3);
    ncoil = size(img,4);
    
    %%% Fermi Window
    [y,x,z] = meshgrid(-opyres/2:opyres/2-1,-opxres/2:opxres/2-1,-opzres/2:opzres/2-1);
    if (~isfield(options,'fermir'))
        fermir=8*opxres/512;%100,12,8,32; 4 for 3T
    else
        fermir=options.fermir*opxres;
    end
    
    if (~isfield(options,'fermiw'))
        fermiw=8*opxres/512;%12,8, 32;
    else
        fermiw=options.fermiw*opxres;
    end
    krad = sqrt(x.^2+y.^2+z.^2);
    FW = 1./(1+exp((krad-fermir)/fermiw));
    
    img_out = zeros(opxres,opyres,opzres,ncoil);
    %%% compute phase
    for icoil = 1:ncoil
        ipha_low = ifftnc(fftnc(img(:,:,:,icoil)).*FW);
        img_out(:,:,:,icoil) = abs(img(:,:,:,icoil)).*exp(1i*(angle(img(:,:,:,icoil)) - angle(ipha_low)));
    end
    img_out = angle(sum(img_out,4));
end

end


function im = fft2c(d)
% im = fft2c(d)
%
% fft2c perfomrs a centered fft2
%
im = fftshift(fft2(fftshift(d)));
end

function im = ifft2c(d)
% im = ifft2c(d)
%
% ifft2c perfomrs a centered ifft2
%
im = fftshift(ifft2(fftshift(d)));
end

function im = fftnc(d)
% im = fftnc(d)
%
% fftnc perfomrs a centered fftn
%
im = fftshift(fftn(fftshift(d)));
end

function im = ifftnc(d)
% im = ifftnc(d)
%
% ifftnc perfomrs a centered ifftn
%
im = fftshift(ifftn(fftshift(d)));
end



function daqtab = read_daqtab(id, ver, n)

if (ver >= 14)    
    for k=1:n
        daqtab(k).pass_number = fread(id, 1, 'short');
        daqtab(k).slice_in_pass = fread(id, 1, 'short');
        daqtab(k).gw_point = fread(id, [3,3], 'float');
        daqtab(k).transpose = fread(id, 1, 'short');
        daqtab(k).rotate = fread(id, 1, 'short');
        daqtab(k).swiftcoilinfo = fread(id, 1, 'short');
        fseek(id,2,'cof');
    end
    
elseif (ver == 11)
    for k=1:n
        daqtab(k).pass_number = fread(id, 1, 'short');
        daqtab(k).slice_in_pass = fread(id, 1, 'short');
        daqtab(k).gw_point = fread(id, [3,3], 'float');
        daqtab(k).transpose = fread(id, 1, 'short');
        daqtab(k).rotate = fread(id, 1, 'short');
    end
    
else    
    for k=1:n
        daqtab(k).pass_number = fread(id, 1, 'short');
        daqtab(k).slice_in_pass = fread(id, 1, 'short');
        daqtab(k).gw_point = fread(id, [3,3], 'float');      
    end
    
end
end


function rdb = read_multi_rcv(id, rdb)
buff = fread(id, 8, 'short');
rdb.dab_start_rcv = buff(1:2:end);
rdb.dab_stop_rcv = buff(2:2:end);
end


function v = read_vartype(id);
v = fread(id, 1, 'ulong');
fseek(id, 4, 0);
end


function a = moduid(x)
a = [];
for k=1:length(x)  % loop over each 8 bit value...
    n = bitshift(bitand(x(k),240),-4) - 1;
    if (n < 0), break; end
    if (n > 9), a=[a,'.']; else a=[a,num2str(n)]; end
    n = bitand(x(k),15) - 1;
    if (n < 0), break; end
    if (n > 9), a=[a,'.']; else a=[a,num2str(n)]; end
end
a = sprintf('%s', a);
end


function a = modchar(x)
warning off;
a = [];
for k=1:length(x)  % loop over each character...
    if (int32(x(k)) < 32 || int32(x(k)) > 126), break; end  % not a printing char
    a = [a, x(k)];
end
a = sprintf('%s', a);
end
